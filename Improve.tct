using System;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.IO;

class Program
{
    static void Main()
    {
        string inputPath = "path_to_your_image.jpg";
        string outputPath = "path_to_save_high_quality_image.jpg";

        EnhanceImageQuality(inputPath, outputPath);
    }

    static void EnhanceImageQuality(string inputPath, string outputPath)
    {
        using (Image originalImage = Image.FromFile(inputPath))
        {
            // Create a new Bitmap with the same size as the original image
            Bitmap highQualityImage = new Bitmap(originalImage.Width, originalImage.Height);

            using (Graphics g = Graphics.FromImage(highQualityImage))
            {
                // Set the interpolation mode for high-quality scaling
                g.InterpolationMode = InterpolationMode.HighQualityBicubic;
                g.PixelOffsetMode = PixelOffsetMode.HighQuality;
                g.CompositingQuality = CompositingQuality.HighQuality;
                g.SmoothingMode = SmoothingMode.HighQuality;

                // Draw the original image onto the bitmap with high quality
                g.DrawImage(originalImage, new Rectangle(0, 0, originalImage.Width, originalImage.Height));

                // Save the high-quality image with the best quality settings
                SaveJpeg(outputPath, highQualityImage, 100L);
            }
        }
    }

    static void SaveJpeg(string path, Bitmap image, long quality)
    {
        // Define the codec parameters for JPEG
        ImageCodecInfo jpegCodec = GetEncoder(ImageFormat.Jpeg);
        EncoderParameters encoderParams = new EncoderParameters(1);
        EncoderParameter qualityParam = new EncoderParameter(System.Drawing.Imaging.Encoder.Quality, quality);
        encoderParams.Param[0] = qualityParam;

        // Save the image as a JPEG file with the specified quality level
        image.Save(path, jpegCodec, encoderParams);
    }

    static ImageCodecInfo GetEncoder(ImageFormat format)
    {
        ImageCodecInfo[] codecs = ImageCodecInfo.GetImageDecoders();
        foreach (ImageCodecInfo codec in codecs)
        {
            if (codec.FormatID == format.Guid)
            {
                return codec;
            }
        }
        return null;
    }
}
